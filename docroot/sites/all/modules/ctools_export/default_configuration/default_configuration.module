<?php

/**
 * @file
 * Bulk export of objects generated by Bulk export module.
 */

/**
 * Implements hook_views_api().
 */
function default_configuration_views_api($module, $api) {
  if ($module == 'views' && $api == 'views_default') {
    return array('version' => 2);
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function default_configuration_ctools_plugin_api($module, $api) {
  if ($module == 'strongarm' && $api == 'strongarm') {
    return array('version' => 1);
  }
  if ($module == 'field_group' && $api == 'field_group') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_image_default_styles().
 */
function default_configuration_image_default_styles() {
  $styles = array();

  // Exported image style: thumbnail.
  $styles['thumbnail'] = array(
    'effects' => array(
      0 => array(
        'label' => 'Scale',
        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
        'effect callback' => 'image_scale_effect',
        'dimensions callback' => 'image_scale_dimensions',
        'form callback' => 'image_scale_form',
        'summary theme' => 'image_scale_summary',
        'module' => 'image',
        'name' => 'image_scale',
        'data' => array(
          'width' => 100,
          'height' => 100,
          'upscale' => 1,
        ),
        'weight' => 0,
      ),
    ),
    'name' => 'thumbnail',
  );

  // Exported image style: medium.
  $styles['medium'] = array(
    'effects' => array(
      0 => array(
        'label' => 'Scale',
        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
        'effect callback' => 'image_scale_effect',
        'dimensions callback' => 'image_scale_dimensions',
        'form callback' => 'image_scale_form',
        'summary theme' => 'image_scale_summary',
        'module' => 'image',
        'name' => 'image_scale',
        'data' => array(
          'width' => 220,
          'height' => 220,
          'upscale' => 1,
        ),
        'weight' => 0,
      ),
    ),
    'name' => 'medium',
  );

  // Exported image style: large.
  $styles['large'] = array(
    'effects' => array(
      0 => array(
        'label' => 'Scale',
        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
        'effect callback' => 'image_scale_effect',
        'dimensions callback' => 'image_scale_dimensions',
        'form callback' => 'image_scale_form',
        'summary theme' => 'image_scale_summary',
        'module' => 'image',
        'name' => 'image_scale',
        'data' => array(
          'width' => 480,
          'height' => 480,
          'upscale' => 0,
        ),
        'weight' => 0,
      ),
    ),
    'name' => 'large',
  );

  return $styles;
}

/**
 * Implements hook_default_rules_configuration().
 */
function default_configuration_default_rules_configuration() {
  $items = array();
  $items['rules_give_ride_workflow'] = entity_import('rules_config', '{ "rules_give_ride_workflow" : {
      "LABEL" : "Give Ride Workflow",
      "PLUGIN" : "reaction rule",
      "REQUIRES" : [ "rules", "flag" ],
      "ON" : [ "flag_flagged_give_ride" ],
      "DO" : [ { "redirect" : { "url" : "ride-confirmation" } } ]
    }
  }');
  $items['rules_add_content_redirect_to_login_bundles'] = entity_import('rules_config', '{ "rules_add_content_redirect_to_login_bundles" : {
      "LABEL" : "Add content redirect to login - bundles",
      "PLUGIN" : "reaction rule",
      "REQUIRES" : [ "rules" ],
      "ON" : [ "node_view" ],
      "IF" : [
        { "user_has_role" : {
            "account" : [ "site:current-user" ],
            "roles" : { "value" : { "1" : "1" } }
          }
        },
        { "entity_is_of_bundle" : {
            "entity" : [ "node" ],
            "type" : "node",
            "bundle" : { "value" : {
                "ride_request" : "ride_request",
                "housing_have" : "housing_have",
                "housing_need" : "housing_need"
              }
            }
          }
        }
      ],
      "DO" : [
        { "drupal_message" : { "message" : "To view people\\u0027s contact info you have to log in. Use your Google, Facebook, or Twitter account, or create an account below. If you already have a user account, you can \\u003Ca href=\\u0022\\/user\\/login\\u0022\\u003Elogin here.\\u003C\\/a\\u003E." } },
        { "redirect" : { "url" : "user\\/register", "destination" : 1 } }
      ]
    }
  }');
  $items['rules_add_content_redirect_to_login_node_add'] = entity_import('rules_config', '{ "rules_add_content_redirect_to_login_node_add" : {
      "LABEL" : "Add content redirect to login - Node add",
      "PLUGIN" : "reaction rule",
      "REQUIRES" : [ "rules" ],
      "ON" : [ "init" ],
      "IF" : [
        { "user_has_role" : {
            "account" : [ "site:current-user" ],
            "roles" : { "value" : { "1" : "1" } }
          }
        },
        { "text_matches" : {
            "text" : [ "site:current-page:path" ],
            "match" : "node\\/add",
            "operation" : "starts"
          }
        }
      ],
      "DO" : [
        { "drupal_message" : { "message" : "To post a request for a ride you have to log in. Use your Google, Facebook, or Twitter account, or create an account below. If you already have a user account, you can \\u003Ca href=\\u0022\\/user\\/login\\u0022\\u003Elogin here.\\u003C\\/a\\u003E." } },
        { "redirect" : { "url" : "user\\/register", "destination" : 1 } }
      ]
    }
  }');
  return $items;
}
